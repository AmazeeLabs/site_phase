<?php

/**
 * @file
 *  Lets the administrator of the site to define different phases in which a
 *  site can be, and these configurations can have different site settings.
 *
 *  @todo: maybe move parts of the module file into separate files to make the
 *  module load light.
 */

/**
 * Implements hook_menu().
 */
function site_phase_menu() {
  $items['admin/config/system/site-phases'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Site phases',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'site_phase_admin',
    'file' => 'includes/site_phase.admin.inc'
  );
  $items['admin/config/system/site-phases/%site_phase/activate'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Activate site phase',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_phase_activate_confirm', 4),
    'file' => 'includes/site_phase.admin.inc'
  );
  $items['admin/config/system/site-phases/%site_phase/configure'] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Configure site phase',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'site_phase_configure_page',
    'page arguments' => array(4),
    'file' => 'includes/site_phase.admin.inc'
  );
  $items['admin/config/system/site-phases/%site_phase/configure/%site_phase_plugin/%'] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title callback' => 'site_phase_plugin_configure_page_title',
    'title arguments' => array(4, 6, 7),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_phase_plugin_configure_form', 4, 6, 7),
    'file' => 'includes/site_phase.admin.inc'
  );
  $items['admin/config/system/site-phases/%site_phase/configure/%site_phase_plugin/%/copy-current-state'] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Copy current state',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_phase_copy_current_site_state_confirm', 4, 6, 7),
    'file' => 'includes/site_phase.admin.inc'
  );
  // @todo: should we allow to delete the current phase?
  $items['admin/config/system/site-phases/%site_phase/delete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Delete site phase',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_phase_delete_confirm', 4),
    'file' => 'includes/site_phase.admin.inc'
  );
  $items['admin/config/system/site-phases/%site_phase/edit'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Edit site phase',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_phase_add_edit_form', 4),
    'file' => 'includes/site_phase.admin.inc'
  );
  return $items;
}

/**
 * Title callback for the plugin configuration page for a phase.
 */
function site_phase_plugin_configure_page_title($phase, $plugin, $configuration_area = NULL) {
  if (!empty($configuration_area)) {
    $configuration_areas = $plugin->getConfigurationAreas();
    return t('Configure the "!configuration_area" of the "!plugin_name" plugin for the "!phase_name" site phase', array('!configuration_area' => $configuration_areas[$configuration_area]['title'], '!plugin_name' => $plugin->getTitle(), '!phase_name' => $phase->name));
  }
  return t('Configure the "!plugin_name" plugin for the "!phase_name" site phase', array('!plugin_name' => $plugin->getTitle(), '!phase_name' => $phase->name));
}

/**
 * Implements hook_theme().
 */
function site_phase_theme() {
  return array(
    'site_phase_admin_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Loads all the phases.
 */
function site_phase_get_all_phases() {
  $query = db_select('site_phases', 'sp')->fields('sp')->orderBy('sp.weight');
  $result = $query->execute()->fetchAll();
  if (empty($result)) {
    $result = array();
  }
  return $result;
}

/**
 * Loads a site phase based on the machine name.
 */
function site_phase_machine_name_load($machine_name) {
  return db_select('site_phases', 'sp')->fields('sp')->condition('sp.machine_name', $machine_name)->execute()->fetch();
}

/**
 * Loads a single phase from the database.
 * @todo: needs refactoring so that site_phase_get_all_phases and this function
 * are using the same code.
 */
function site_phase_load($spid) {
  return db_select('site_phases', 'sp')->fields('sp')->condition('sp.spid', $spid)->execute()->fetch();
}

/**
 * Loads the default phase of the site.
 */
function site_phase_default_load() {
  return db_select('site_phases', 'sp')->fields('sp')->condition('sp.is_default', 1)->execute()->fetch();
}

/**
 * Loads a plugin by its key.
 */
function site_phase_plugin_load($plugin_key) {
  return SiteConfigurationPluginFactory::getInstance()->getPlugin($plugin_key);
}

/**
 * Loads the configuration for a phase.
 */
function site_phase_configuration_load($phase_machine_name, $plugin_id = NULL, $configuration_area = NULL) {
  $query = db_select('site_phases_configuration', 'spc')->fields('spc')->condition('spc.phase_machine_name', $phase_machine_name);
  if (!empty($plugin_id)) {
    $query->condition('spc.plugin_id', $plugin_id);
  }
  if (!empty($configuration_area)) {
    $query->condition('spc.configuration_area', $configuration_area);
  }
  $result = $query->execute()->fetchAll();
  if (!empty($result)) {
    $return = array();
    foreach ($result as $row) {
      $row->configuration = unserialize($row->configuration);
      $return[$row->plugin_id][$row->configuration_area] = $row;
    }
    if (!empty($plugin_id) && !empty($configuration_area)) {
      return $return[$plugin_id][$configuration_area];
    }
    elseif (!empty($plugin_id)) {
      return $return[$plugin_id];
    }
    return $return;
  }
  return FALSE;
}

/**
 * Saves the configuration of a phase for a plugin.
 */
function site_phase_configuration_save($phase_machine_name, $plugin_id, $configuration_area, $configuration) {
  db_delete('site_phases_configuration')->condition('phase_machine_name', $phase_machine_name)->condition('plugin_id', $plugin_id)->condition('configuration_area', $configuration_area)->execute();
  $configuration_object = (object) array('phase_machine_name' => $phase_machine_name, 'plugin_id' => $plugin_id, 'configuration_area' => $configuration_area, 'configuration' => $configuration);
  drupal_write_record('site_phases_configuration', $configuration_object);
}

/**
 * Saves a site phase into the database.
 */
function site_phase_save($phase) {
  $primary_keys = array();
  if (!empty($phase->spid)) {
    $primary_keys = array('spid');
  }
  drupal_write_record('site_phases', $phase, $primary_keys);
}

/**
 * Deletes a phase by its machine name.
 */
function site_phase_delete($machine_name) {
  db_delete('site_phases')->condition('machine_name', $machine_name)->execute();
  db_delete('site_phases_configuration')->condition('phase_machine_name', $machine_name)->execute();
}

// A few helpers for the actions paths.
function site_phase_get_edit_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/edit';
}

function site_phase_get_delete_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/delete';
}

function site_phase_get_configure_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/configure';
}

function site_phase_get_copy_state_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/copy-current-state';
}

function site_phase_get_activate_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/activate';
}

/**
 * Returns the machine name of the current phase of the site.
 */
function site_phase_get_current_phase() {
  return variable_get('site_phase_current', 'default');
}

/**
 * Activates a phase on the site.
 */
function site_phase_activate_phase($phase) {
  try {
    // For each available plugins, we apply the configuration of the phase.
    $plugins = site_phase_get_all_configuration_plugins();
    $default_phase = site_phase_default_load();
    $default_configuration = site_phase_configuration_load($default_phase->machine_name);
    foreach ($plugins as $plugin_key => $plugin) {
      $configuration = site_phase_configuration_load($phase->machine_name, $plugin_key);
      if ($configuration !== FALSE) {
        $plugin_object = SiteConfigurationPluginFactory::getInstance()->getPlugin($plugin_key);
        $result_configuration = $plugin_object->mergeConfiguration($default_configuration[$plugin_key], $configuration);
        $plugin_object->applyConfiguration($result_configuration);
      }
    }
  }
  catch (Exception $e) {
    // @todo: maybe hande different types of exceptions.
    watchdog_exception('site_phase', $e);
  }
  variable_set('site_phase_current', $phase->machine_name);
}

/**
 * Saves the current configuration of the site to a phase.
 */
function site_phase_copy_current_state_to_phase($phase_machine_name, $plugin_id = NULL, $configuration_area = NULL) {
  try {
    // For each available plugins, we get the site configuration and save it on
    // the phase.
    $plugins = site_phase_get_all_configuration_plugins();
    foreach ($plugins as $plugin_key => $plugin) {
      $plugin_object = SiteConfigurationPluginFactory::getInstance()->getPlugin($plugin_key);
      // Filter out all the other plugins which should not be updated.
      if (!empty($plugin_id) && $plugin_object->getId() != $plugin_id) {
        continue;
      }
      $current_configuration = $plugin_object->getCurrentSiteConfiguration();
      if (!empty($current_configuration)) {
        foreach ($current_configuration as $conf_area => $configuration) {
          // Also, filter out the configuration areas, if we have such a
          // parameter.
          if (!empty($configuration_area) && $conf_area != $configuration_area) {
            continue;
          }
          site_phase_configuration_save($phase_machine_name, $plugin_object->getId(), $conf_area, $configuration);
        }
      }
    }
  }
  catch (Exception $e) {
    // @todo: maybe hande different types of exceptions.
    watchdog_exception('site_phase', $e);
  }
}

/**
 * Returns all the available configuration plugins on the site.
 */
function site_phase_get_all_configuration_plugins() {
  $plugins = module_invoke_all('site_phase_configuration_plugins');
  return $plugins;
}

/**
 * Implements hook_site_phase_configuration_plugins().
 *
 * @todo: Document in an api folder.
 */
function site_phase_site_phase_configuration_plugins() {
  return array(
    'user_perm' => array(
      'class' => 'SiteUserPermConfigurationPlugin',
      'title' => 'User permissions',
      'description' => 'Configuration plugin for the current user permissions on the site.',
      'configuration_areas' => array(
        'available_permissions' => array(
          'title' => t('Available permissions'),
        ),
        'permissions' => array(
          'title' => t('Permissions configuration'),
        ),
      ),
    ),
  );
}
