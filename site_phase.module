<?php

/**
 * @file
 *  Lets the administrator of the site to define different phases in which a
 *  site can be, and these configurations can have different site settings.
 *
 *  @todo: maybe move parts of the module file into separate files to make the
 *  module load light.
 */

/**
 * Implements hook_menu().
 */
function site_phase_menu() {
  $items['admin/config/system/site-phases'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Site phases',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'site_phase_admin',
    'file' => 'includes/site_phase.admin.inc'
  );
  $items['admin/config/system/site-phases/%site_phase/activate'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Activate site phase',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_phase_activate_confirm', 4),
    'file' => 'includes/site_phase.admin.inc'
  );
  $items['admin/config/system/site-phases/%site_phase/configure'] = array(
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'title' => 'Configure site phase',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'site_phase_configure_page',
    'page arguments' => array(4),
    'file' => 'includes/site_phase.admin.inc'
  );
  $plugins = site_phase_get_all_state_plugins();
  $links = array();
  foreach ($plugins as $key => $plugin) {
    $items['admin/config/system/site-phases/%site_phase/configure/%site_phase_plugin'] = array(
      'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
      'title callback' => 'site_phase_plugin_configure_page_title',
      'title arguments' => array(4, 6),
      'access arguments' => array('administer site configuration'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('site_phase_plugin_configure_form', 4, 6),
      'file' => 'includes/site_phase.admin.inc'
    );
  }
  // @todo: should we allow to delete the current phase?
  $items['admin/config/system/site-phases/%site_phase/delete'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Delete site phase',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_phase_delete_confirm', 4),
    'file' => 'includes/site_phase.admin.inc'
  );
  $items['admin/config/system/site-phases/%site_phase/edit'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Edit site phase',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('site_phase_add_edit_form', 4),
    'file' => 'includes/site_phase.admin.inc'
  );
  return $items;
}

/**
 * Title callback for the plugin configuration page for a phase.
 */
function site_phase_plugin_configure_page_title($phase, $plugin) {
  return t('Configure the "!plugin_name" plugin for the "!phase_name" phase', array('!plugin_name' => $plugin->getTitle(), '!phase_name' => $phase->name));
}

/**
 * Implements hook_theme().
 */
function site_phase_theme() {
  return array(
    'site_phase_admin_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Loads all the phases.
 */
function site_phase_get_all_phases() {
  $query = db_select('site_phases', 'sp')->fields('sp')->orderBy('sp.weight');
  $result = $query->execute()->fetchAll();
  if (empty($result)) {
    $result = array();
  }
  return $result;
}

/**
 * Loads a site phase based on the machine name.
 */
function site_phase_machine_name_load($machine_name) {
  return db_select('site_phases', 'sp')->fields('sp')->condition('sp.machine_name', $machine_name)->execute()->fetch();
}

/**
 * Loads a single phase from the database.
 * @todo: needs refactoring so that site_phase_get_all_phases and this function
 * are using the same code.
 */
function site_phase_load($spid) {
  return db_select('site_phases', 'sp')->fields('sp')->condition('sp.spid', $spid)->execute()->fetch();
}

/**
 * Loads a plugin by its key.
 */
function site_phase_plugin_load($plugin_key) {
  return SiteStatePluginFactory::getInstance()->getPlugin($plugin_key);
}

/**
 * Loads the state for a phase.
 */
function site_phase_state_load($phase_machine_name, $plugin_id = NULL) {
  $query = db_select('site_phases_states', 'sps')->fields('sps')->condition('sps.phase_machine_name', $phase_machine_name);
  if (!empty($plugin_id)) {
    $query->condition('sps.plugin_id', $plugin_id);
  }
  $result = $query->execute()->fetchAll();
  if (!empty($result)) {
    $return = array();
    foreach ($result as $row) {
      $row->state = unserialize($row->state);
      $return[$row->plugin_id] = $row;
    }
    if (!empty($plugin_id)) {
      return $return[$plugin_id];
    }
    return $return;
  }
  return FALSE;
}

/**
 * Saves the state (configuration) of a phase for a plugin.
 */
function site_phase_state_save($phase_machine_name, $plugin_id, $state) {
  db_delete('site_phases_states')->condition('phase_machine_name', $phase_machine_name)->condition('plugin_id', $plugin_id)->execute();
  $state_object = (object) array('phase_machine_name' => $phase_machine_name, 'plugin_id' => $plugin_id, 'state' => $state);
  drupal_write_record('site_phases_states', $state_object);
}

/**
 * Saves a site phase into the database.
 */
function site_phase_save($phase) {
  $primary_keys = array();
  if (!empty($phase->spid)) {
    $primary_keys = array('spid');
  }
  drupal_write_record('site_phases', $phase, $primary_keys);
}

/**
 * Deletes a phase by its machine name.
 */
function site_phase_delete($machine_name) {
  db_delete('site_phases')->condition('machine_name', $machine_name)->execute();
  db_delete('site_phases_states')->condition('phase_machine_name', $machine_name)->execute();
}

// A few helpers for the actions paths.
function site_phase_get_edit_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/edit';
}

function site_phase_get_delete_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/delete';
}

function site_phase_get_configure_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/configure';
}

function site_phase_get_activate_path($spid) {
  return 'admin/config/system/site-phases/' . $spid . '/activate';
}

/**
 * Returns the machine name of the current phase of the site.
 */
function site_phase_get_current_phase() {
  return variable_get('site_phase_current', 'default');
}

/**
 * Activates a phase on the site.
 */
function site_phase_activate_phase($phase) {
  try {
    // For each available plugins, we apply the state of the phase.
    $plugins = site_phase_get_all_state_plugins();
    $state = site_phase_state_load($phase->machine_name);
    if (!empty($state)) {
      foreach ($plugins as $plugin_key => $plugin) {
        if (isset($state[$plugin_key])) {
          $plugin_object = SiteStatePluginFactory::getInstance()->getPlugin($plugin_key);
          $plugin_object->applyState($state[$plugin_key]);
        }
      }
    }
  }
  catch (Exception $e) {
    // @todo: maybe hande different types of exceptions.
    watchdog_exception('site_phase', $e);
  }
  variable_set('site_phase_current', $phase->machine_name);
}

/**
 * Returns all the available state plugins on the site.
 */
function site_phase_get_all_state_plugins() {
  $plugins = module_invoke_all('site_phase_state_plugins');
  return $plugins;
}

/**
 * Implements hook_site_phase_state_plugins().
 *
 * @todo: Document in an api folder.
 */
function site_phase_site_phase_state_plugins() {
  return array(
    'user_perm' => array(
      'class' => 'SiteStateUserPermPlugin',
      'name' => 'User permissions',
      'description' => 'State plugin for the current user permissions on the site.'
    ),
  );
}
